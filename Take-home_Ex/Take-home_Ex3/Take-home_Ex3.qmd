---
title: "Take-home_Ex3: Prototyping Modules for Geospatial Analytics Shiny Application"
format: html
date-modified: "last-modified"
execute:  
  warning: false
  freeze: true
  message: false 
  eval: true 
  echo: true 
  fig-retine: 3
date: "`r Sys.Date()`"
---

# **1. Introduction**

This take-home exercise will be showcasing the analysis we will be working in our project. Also, it will include the storyboard of our project in terms of the UI design and prototype of our Shiny Application.

In the following part, I will be analyse the types of recycling facilities in Hong Kong. Further on, I will conduct Network Kernal Density Estimate (NKDE) for our project.

# 2. Analysis on the type of recycling facilities in Hong Kong

### 2.1 Getting Started

```{r}
pacman::p_load(arrow, dplyr, lubridate, tidyverse, sf, sfdep, sp, spNetwork, spdep, raster, spatstat, tmap, readxl, plotly)
```

```{r}
osm_basemap <- tm_basemap(server = "OpenStreetMap.HOT")
imagery_basemap <- tm_basemap(server = "Esri.WorldImagery")
```

### 2.2 Importing Data

#### 2.2.1 Aspatial Data

```{r}
hk_census <- read_excel("data/aspatial/hkcensus.xlsx")
```

#### 2.2.2 Geospatial Data

##### 2.2.2.1 Cycling Points in Hong Kong

```{r}
cp <- read_csv("data/aspatial/hkrecyclepoints.csv")
```

Change the geographic location

```{r}
cp_sf <- st_as_sf(cp, 
                  coords = c("lgt","lat"), 
                  crs = 4326) %>% 
  st_transform(crs= 2326)
```

```{r}
summary(cp_sf)
```

```{r}
plot(st_geometry(cp_sf))
```

```{r}
tmap_mode('plot')
tm_shape(cp_sf)+
  tm_dots()
```

##### 2.2.2.2 18 Districts in Hong Kong

```{r}
district_18 <- st_read(dsn = "data/geospatial/hk_18Districts/",
                       layer = "HKDistrict18" )
```

```{r}
sf_district_18 <- district_18 %>% st_transform(crs = 2326)
```

```{r}
st_crs(sf_district_18)
```

```{r}
plot(st_geometry(sf_district_18))
```

##### 2.2.2.3 Tertiary Planning Units (TPU) in Hong Kong

```{r}
tpu_hk <- st_read(dsn = "data/geospatial/TertiaryPlanningUnit_SHP", 
                  layer = "TPU")
```

```{r}
st_crs(tpu_hk)
```

```{r}
plot(st_geometry(tpu_hk))
```

##### 2.2.2.4 Deriving SPU layer of Hong Kong

```{r}
spu_layer <- tpu_hk %>%
  group_by(SPU_NUMBER) %>%
  summarise()
```

```{r}
plot(st_geometry(spu_layer))
```

```{r}
spu_with_district <- st_within(spu_layer, sf_district_18)

```

```{r}
tmap_mode("plot")

# Plot
private_cp_spu_map <- tm_shape(spu_layer) +
  tm_polygons() + # SPU shapes colored by point count
  tm_shape(private_collection_points) +
  tm_dots(col = "district_id", size = 0.1, palette = "Set1", title = "District") + # Points colored by district
  tm_layout(legend.position = c("left", "bottom"))

print(private_cp_spu_map)
```

```{r}
tmap_mode("plot")

# Plot
public_cp_spu_map <- tm_shape(spu_layer) +
  tm_polygons() + # SPU shapes colored by point count
  tm_shape(recycling_bins) +
  tm_dots(col = "district_id", size = 0.1, palette = "Set1", title = "District") + # Points colored by district
  tm_layout(legend.position = c("left", "bottom"))

print(public_cp_spu_map)
```

```{r}

```

##### 2.2.2.4 Road Data in Hong Kong

```{r}
#| eval: false
road_data <- st_read(dsn = "data/geospatial/china-latest-free.shp", 
                     layer = "gis_osm_roads_free_1")
```

Transform the Data into Hong Kong Projection System

```{r}
#| eval: false
road_data_2326 <- st_transform(road_data, 2326)
```

```{r}
#| eval: false
roads_in_hk <- st_intersection(road_data_2326, sf_district_18)
```

```{r}
#| eval: false
write_rds(roads_in_hk, "data/rds/sf_roads_in_hk.rds")
```

```{r}
roads_in_hk <- read_rds("data/rds/sf_roads_in_hk.rds")
```

### 2.3 Types of Recycling Points in Hong Kong

```{r}
unique_legends <- unique(cp_sf$legend)

# Print or inspect the unique values
print(unique_legends)

```

There are 7 different types of recycling points in Hong Kong which are:

| Types of Recycling Points in Hong Kong                             |
|--------------------------------------------------------------------|
| Recycling Bins at Public Place                                     |
| Recycling Spots                                                    |
| Private Collection Points (e.g. housing estates, shopping centres) |
| NGO Collection Points                                              |
| Recycling Stations/ Recycling Stores                               |
| Street Corner Recycling Shops                                      |
| Smart Bin                                                          |

In order to join the data, we need to mutate the values of district_id in cp_sf in order to match with the values of ENAME in sf_district_id.

```{r}
cp_sf_1 <- cp_sf %>%
  mutate(district_id = toupper(str_replace_all(district_id, "_", " ")))
```

```{r}
recycling_bins <- subset(cp_sf_1, legend == "Recycling Bins at Public Place")
recycling_spots <- subset(cp_sf_1, legend == "Recycling Spots")
private_collection_points <- subset(cp_sf_1, legend == "Private Collection Points (e.g. housing estates, shopping centres)")
ngo_collection_points <- subset(cp_sf_1, legend == "NGO Collection Points")
recycling_stations <- subset(cp_sf_1, legend == "Recycling Stations/Recycling Stores")
street_corner_recycling_shops <- subset(cp_sf_1, legend == "Street Corner Recycling Shops")
smart_bins <- subset(cp_sf_1, legend == "Smart Bin")
```

```{r}
recycling_spots_cp <- st_join(sf_district_18, recycling_spots)
ngo_cp <- st_join(sf_district_18, ngo_collection_points)
pcp_joined_data <- st_join(sf_district_18, private_collection_points)
recycling_bins_cp <- st_join(sf_district_18, recycling_bins)
recycling_stations_cp <- st_join(sf_district_18, recycling_stations)
street_corner_cp <- st_join(sf_district_18, street_corner_recycling_shops)
smart_bins_cp <- st_join(sf_district_18, smart_bins)
```

```{r}
private_collection_points_by_district <- pcp_joined_data %>%
  group_by(ENAME) %>%
  summarize(total_pcp = n())

ngo_cp_by_district <- ngo_cp %>%
  group_by(ENAME) %>%
  summarize(total_ngo_cp = n())

recycling_spots_by_district <- recycling_spots_cp %>%
  group_by(ENAME) %>%
  summarize(total_recycling_spots = n())

recycling_bins_by_district <- recycling_bins_cp %>%
  group_by(ENAME) %>%
  summarize(total_recycling_bins = n())

recycling_stations_by_district <- recycling_stations_cp %>%
  group_by(ENAME) %>%
  summarize(total_recycling_stations = n())

street_corner_shops_by_district <- street_corner_cp %>%
  group_by(ENAME) %>%
  summarize(total_street_corner = n())

smart_bins_by_district <- smart_bins_cp %>%
  group_by(ENAME) %>%
  summarize(total_smart_bins = n())

```

```{r}
pcp_map <- tm_shape(private_collection_points_by_district) +
  tm_fill(col = "total_pcp") +
  tm_borders() +
  tm_layout(legend.show = TRUE, main.title = "Distribution of Private Collection Points by District",main.title.position = "center", main.title.size = 0.75)+
  tm_scale_bar()

```

```{r}
ngo_cp_map <- tm_shape(ngo_cp_by_district) +
  tm_fill(col = "total_ngo_cp") +
  tm_borders() +
  tm_layout(legend.show = TRUE, main.title = "Distribution of NGO Points by District", main.title.position = "center", main.title.size = 0.75)+
  tm_scale_bar()
```

```{r}
recycling_spots_map <- tm_shape(recycling_spots_by_district) +
  tm_fill(col = "total_recycling_spots") +
  tm_borders() +
  tm_layout(legend.show = TRUE, main.title = "Distribution of Recycling Spots by District",main.title.position = "center", main.title.size = 0.75)+
  tm_scale_bar()
```

```{r}
recycling_bins_map <- tm_shape(recycling_bins_by_district) +
  tm_fill(col = "total_recycling_bins") +
  tm_borders() +
  tm_layout(legend.show = TRUE, main.title = "Distribution of Recycling Bins by District", main.title.position = "center", main.title.size = 0.75)+
  tm_scale_bar()
```

```{r}
recycling_stations_map <- tm_shape(recycling_stations_by_district) +
  tm_fill(col = "total_recycling_stations") +
  tm_borders() +
  tm_layout(legend.show = TRUE, main.title = "Distribution of Recycling Stations by District", main.title.position = "center", main.title.size = 0.75)+
  tm_scale_bar()
```

```{r}
street_corner_shops_map <- tm_shape(street_corner_shops_by_district) +
  tm_fill(col = "total_street_corner") +
  tm_borders() +
  tm_layout(legend.show = TRUE,main.title = "Distribution of Street Corner Shops by District", main.title.position = "center", main.title.size = 0.75)+
  tm_scale_bar()
```

```{r}
smart_bin_map <- tm_shape(smart_bins_by_district) +
  tm_fill(col = "total_smart_bins") +
  tm_borders() +
  tm_layout(legend.show = TRUE,main.title = "Distribution of Smart Bins by District",main.title.position = "center", main.title.size = 0.75)+
  tm_scale_bar()
```

```{r}
tmap_arrange(pcp_map,recycling_spots_map, recycling_bins_map, ncol=2)
```

From the above visualizations,

```{r}
tmap_arrange(ngo_cp_map, recycling_stations_map, street_corner_shops_map, smart_bin_map, ncol = 2)
```

#### 2.3.1 Private Collection Points

```{r}
wm_q_pcp <- private_collection_points_by_district %>%
  mutate(nb = st_contiguity(geometry, queen = TRUE),
         wt = st_weights(nb,
                         style = "W",
                         allow_zero = TRUE),
         .before = 1) 
wm_q_pcp
```

```{r}
set.seed(1234)
global_moran_perm(wm_q_pcp$total_pcp,
                       wm_q_pcp$nb,
                       wm_q_pcp$wt,
                  zero.policy = TRUE,
                  nsim = 999)
```

```{r}
lisa_pcp <- wm_q_pcp %>% 
  mutate(local_moran = local_moran(
    total_pcp, nb, wt, zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
lisa_sig_pcp <- lisa_pcp  %>%
  filter(p_ii < 0.05)

tmap_mode("plot")
tm_shape(lisa_pcp) +
  tm_polygons() +
  tm_borders(alpha = 0.7) +
tm_shape(lisa_pcp) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```

#### 2.3.2 Recycling Bins

```{r}
wm_q_rbins <- recycling_bins_by_district %>%
  mutate(nb = st_contiguity(geometry, queen = TRUE),
         wt = st_weights(nb,
                         style = "W",
                         allow_zero = TRUE),
         .before = 1) 
wm_q_rbins
```

```{r}
set.seed(1234)
global_moran_perm(wm_q_rbins$total_recycling_bins,
                       wm_q_rbins$nb,
                       wm_q_rbins$wt,
                  zero.policy = TRUE,
                  nsim = 999)
```

```{r}
lisa_rbins <- wm_q_rbins %>% 
  mutate(local_moran = local_moran(
    total_recycling_bins, nb, wt, zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
lisa_sig_rspots <- lisa_rbins  %>%
  filter(p_ii < 0.05)

tmap_mode("plot")
tm_shape(lisa_rbins) +
  tm_polygons() +
  tm_borders(alpha = 0.7) +
tm_shape(lisa_rbins) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```

#### 2.3.2 Recycling Spots

```{r}
wm_q_rspots <- recycling_spots_by_district %>%
  mutate(nb = st_contiguity(geometry, queen = TRUE),
         wt = st_weights(nb,
                         style = "W",
                         allow_zero = TRUE),
         .before = 1) 
wm_q_rspots
```

```{r}
set.seed(1234)
global_moran_perm(wm_q_rspots$total_recycling_spots,
                       wm_q_rspots$nb,
                       wm_q_rspots$wt,
                  zero.policy = TRUE,
                  nsim = 999)
```

```{r}
lisa_rspots <- wm_q_rspots %>% 
  mutate(local_moran = local_moran(
    total_recycling_spots, nb, wt, zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
lisa_sig_rspots <- lisa_rspots  %>%
  filter(p_ii < 0.05)

tmap_mode("plot")
tm_shape(lisa_rspots) +
  tm_polygons() +
  tm_borders(alpha = 0.7) +
tm_shape(lisa_rspots) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```

### 2.5 Type of Waste

```{r}
unique_waste_types <- cp_sf_1 %>%
  pull(waste_type) %>% # Extract the waste_type column
  strsplit(split = ",") %>% # Split each string into separate elements
  unlist() %>% # Flatten the list into a single vector
  trimws() %>% # Trim whitespace
  unique() # Extract unique elements

# Display the unique waste types
print(unique_waste_types)
```

```{r}
cp_sf_1_expanded <- cp_sf_1 %>%
  # Separate the waste_type column into multiple rows
  separate_rows(waste_type, sep = ",") %>%
  # Trim whitespace to ensure consistency
  mutate(waste_type = trimws(waste_type))
```

```{r}
# Example: Group by waste_type and summarise or perform operations
cp_sf_1_grouped_by_waste_type <- cp_sf_1_expanded %>%
  group_by(waste_type) %>%
  summarise(number_of_points = n())

# This will give you a summary dataframe where each waste type has an associated count of recycling points.
```

```{r}
cp_sf_1_separated <- cp_sf_1 %>%
  separate_rows(waste_type, sep = ",") %>%
  mutate(waste_type = trimws(waste_type))
```

```{r}
tm_map <- tm_shape(cp_sf_1_separated) + 
  tm_dots(col = "waste_type", palette = "viridis", title = "Waste Type",
          popup.vars = c("Waste Type" = "waste_type")) +  # Show waste type in popup
  tm_basemap(server = "OpenStreetMap") +
  tm_layout(title = "Recycling Points in Hong Kong by Waste Type")

# Print the map
tm_map
```

```{r}
cp_sf_1_joined <- st_join(sf_district_18,cp_sf_1_separated)
```

```{r}
cp_sf_1_grouped <- cp_sf_1_joined %>%
  group_by(ENAME, waste_type) 

# View the result
head(cp_sf_1_grouped)
```

```{r}
tmap_mode("view")

# Create the map
tm_map <- tm_shape(cp_sf_1_expanded) + 
  tm_dots(col = "waste_type", palette = "viridis", title = "Waste Type", popup.vars = c("Waste Type" = "waste_type", "Points" = "number_of_points")) +
  tm_basemap(server = "OpenStreetMap") +
  tm_layout(title = "Recycling Points in Hong Kong by Waste Type")

# Print the map
tm_map
```

### 2.4 NKDE

```{r}
unique_types <- unique(st_geometry_type(roads_in_hk))
```

```{r}
print(unique_types)
```

```{r}
if ("LINESTRING" %in% unique_types) {
  roads_in_hk <- st_cast(roads_in_hk, "LINESTRING")
} else {
  # handle the case when no linestrings are found
  stop("No linestrings found in roads_in_hk")
}
```

```{r}
unique_types <- unique(st_geometry_type(roads_in_hk))
print(unique_types)
```

```{r}
#| eval: false
lixels_hk <- lixelize_lines(roads_in_hk,750, mindist = 375)
```

```{r}
#| eval: false
samples_hk <- lines_center(lixels_hk)
```

```{r}
#| eval: false
densities <- nkde(roads_in_hk, 
                  events = cp_sf,
                  w = rep(1,nrow(cp_sf)),
                  samples = samples_hk,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, #we aggregate events within a 5m radius (faster calculation)
                  sparse = TRUE,
                  verbose = FALSE)
```

```{r}
#| eval: false
samples_hk$density <- densities
lixels_hk$density <- densities

samples_hk$density <- samples_tm$density*1000
lixels_hk$density <- lixels_tm$density*1000

tmap_mode("view")
tm_shape(lixels_hk)+
  tm_lines(col="density")+
tm_shape(cp_sf)+
  tm_dots(alpha=0.1) +
tm_basemap("OpenStreetMap")
```

# **3. Storyboard**

For our project, we will be analysing the recycling points in Hong Kong and observe its distribution over the 18 districts in Hong Kong. Afterwards, we will further analyse on the districts with high adn low density. We hope to seek to identify the gaps in coverage and areas with lack of recycling facilities. Therefore, in our application, we hope to visualize the recycling facilities in each district.

The next part will go through the features and design of our application.

# **4. UI Design & Prototype**

This is will be the UI design of our Shiny App.

### Home Page

![](images/clipboard-3889418583.png)

### Visualization Page

This will be the Visualization Tab where users are able to have idea of the locations of recycling points. We have include some interaction features such as drop-down menu for them to select their desirable districts and recyclables that they want to recycle.

![](images/clipboard-4162415444.png)

## Analysis Pages: SPAA & NETSPAA

The following 2 pages also include interactive feature such as drop-down menu for the districts that we do our analysis on.

![](images/clipboard-805621792.png)

![](images/clipboard-2302619658.png)
