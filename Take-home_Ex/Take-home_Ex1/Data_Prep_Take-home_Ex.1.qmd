---
title: "Data_Prep_Take-home_Ex.1"
execute:  
  warning: false
date: "`r Sys.Date()`" 
---

# Getting Started

```{r}
pacman::p_load(arrow, lubridate, tidyverse,maptools, sf, spNetwork, raster, spatstat, tmap)

```

## 1. Loading of Data

### 1.1 Loading of grab data frame

```{r}
#|eval: false
grab_df <- read_parquet("data/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet")
```

### 1.2 Loading of Road data set from OpenStreetMap

```{r}
#|eval: false
road_data <- st_read(dsn = "data/malaysia-singapore-brunei-latest-free.shp", 
                     layer = "gis_osm_roads_free_1")
```

**Checking the CRS of road data**

```{r}
#|eval: false
st_crs(road_data)
```

**This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414. Since it indicates that EPSG is 4326, we need to change the EPSG code into 3414.**

```{r}
#|eval: false
road_data_3414 <- st_transform(road_data, 3414)
```

```{r}
#|eval: false
#plot(road_data_3414)
```

### 1.3 Loading of Master Plan 2019 Subzone Boundary (No Sea) from Data.gov.sg

```{r}
mpsz <- st_read(dsn = "data/MPSZ-2019", 
                layer = "MPSZ-2019")
```

**Checking the Coordination of mpsz_sf**

```{r}
st_crs(mpsz)
```

**This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414. Since it indicates that EPSG is 4326, we need to change the EPSG code into 3414.**

```{r}
mpsz3414 <- st_transform(mpsz, 3414)
```

```{r}
st_crs(mpsz3414)
```

```{r}
#|eval: false
#plot(st_geometry(mpsz3414))
```

## 2. Extracting Geospatial Data Layer

### 2.1 Extracting Grab taxi locations by origin

```{r}
#|eval: false
grab_df$pingtimstamp <- as_datetime(grab_df$pingtimestamp)
```

```{r}
#|eval: false
grab_origin <- grab_df %>% 
  group_by(trj_id) %>%
  arrange(pingtimestamp) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimstamp,
                        label = TRUE,
                        abbr = TRUE),
         start_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))
```

### 2.1.2 Transform grab_origin_df into spatial data

```{r}
#|eval: false
sf_grab_origin_data <- st_as_sf(grab_origin, 
                                coords = c("rawlng","rawlat"), 
                                crs = 4326) %>% 
  st_transform(crs = 3414)
```

```{r}
#|eval: false
write_rds(sf_grab_origin_data, "data/rds/sf_grab_origin_data.rds")
```

```{r}
sf_grab_origin_data <- read_rds("data/rds/sf_grab_origin_data.rds")
```

```{r}
summary(sf_grab_origin_data)
```

```{r}
tmap_mode('view')
tm_shape(sf_grab_origin_data)+
  tm_dots()
```

### 2.2 Extracting Singapore boundary layer excluding outer islands

```{r}
outer_islands <- mpsz3414[grep("island", mpsz3414$PLN_AREA_N, ignore.case = TRUE), ] #print(outer_islands) 
```

```{r}
#|eval: false 
#plot(outer_islands)
```

```{r}
merged_map <- st_union(mpsz3414, outer_islands)
```

```{r}
map_without_outer_islands <- st_difference(mpsz3414, st_union(outer_islands))
```

```{r}
#|eval: false 
#plot(map_without_outer_islands)
```

```{r}
sf_map_without_outer_islands <- st_cast(map_without_outer_islands, "POLYGON")
```

### 2.3 Extracting Road Layer within Singapore excluding outer islands

```{r}
#|eval: false
roads_in_singapore <- st_intersection(road_data_3414, map_without_outer_islands)
```

```{r}
#|eval: false
sf_roads_in_sg <- st_cast(roads_in_singapore, "LINESTRING")
```

```{r}
#|eval: false
write_rds(sf_roads_in_sg, "data/rds/sf_roads_in_sg.rds")
```

```{r}
sf_roads_in_sg <- read_rds("data/rds/sf_roads_in_sg.rds")
```

```{r}
#|eval: false
#plot(map_without_outer_islands$geometry, main = "Roads in Singapore")
#plot(roads_in_singapore$geometry, add = TRUE, col = "red")
```

## 3. Traditional Kernel Density Estimation layers

To reduce the data size and focus on one specific area, I will be doing the analysis on Punggol town.

### 3.1 Creating Sg_boundary owin object

```{r}
sg_sf <- sf_map_without_outer_islands %>%    st_union()
```

```{r}
#|eval: false 
#plot(sg_sf)
```

```{r}
grab_origin_ppp <- as.ppp(sf_grab_origin_data)
```

```{r}
summary(grab_origin_ppp)
```

```{r}
#|eval: false 
#plot(grab_origin_ppp)
```

```{r}
summary(grab_origin_ppp)
```

```{r}
sg_owin <- as.owin(sg_sf)  
summary(sg_owin)
```

```{r}
sg_grab_origin_ppp = grab_origin_ppp[sg_owin] 
summary(sg_grab_origin_ppp)
```

```{r}
#|eval: false 
#plot(sg_grab_origin_ppp)
```
